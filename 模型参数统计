import torch
import torch.nn as nn
import torchvision
from torchvision.models import alexnet
import torch
from thop import profile
import torchsummary
from torch.nn import init



def get_parameter_number(model):
    total_num = sum(p.numel() for p in model.parameters())
    trainable_num = sum(p.numel() for p in model.parameters() if p.requires_grad)
   #return {'Total': total_num, 'Trainable': trainable_num}
    trainable_para_size_MB = trainable_num * 4 / 1024 / 1024
    return total_num,  trainable_num, trainable_para_size_MB
class AlexNet(nn.Module):
    def __init__(self, num_classes=1000):
        super(AlexNet, self).__init__()
        self.feature_extraction = nn.Sequential(
            nn.Conv2d(in_channels=3, out_channels=96, kernel_size=11, stride=4, padding=2, bias=False),
            nn.ReLU(inplace=True),
            nn.MaxPool2d(kernel_size=3, stride=2, padding=0),
            nn.Conv2d(in_channels=96, out_channels=192, kernel_size=5, stride=1, padding=2, bias=False),
            nn.ReLU(inplace=True),
            nn.MaxPool2d(kernel_size=3, stride=2, padding=0),
            nn.Conv2d(in_channels=192, out_channels=384, kernel_size=3, stride=1, padding=1, bias=False),
            nn.ReLU(inplace=True),
            nn.Conv2d(in_channels=384, out_channels=256, kernel_size=3, stride=1, padding=1, bias=False),
            nn.ReLU(inplace=True),
            nn.Conv2d(in_channels=256, out_channels=256, kernel_size=3, stride=1, padding=1, bias=False),
            nn.ReLU(inplace=True),
            nn.MaxPool2d(kernel_size=3, stride=2, padding=0),
        )
        self.classifier = nn.Sequential(
            nn.Dropout(p=0.5),
            nn.Linear(in_features=256 * 6 * 6, out_features=4096),
            nn.ReLU(inplace=True),
            nn.Dropout(p=0.5),
            nn.Linear(in_features=4096, out_features=4096),
            nn.ReLU(inplace=True),
            nn.Linear(in_features=4096, out_features=num_classes),
        )

    def forward(self, x):
        x = self.feature_extraction(x)
        x = x.view(x.size(0), 256 * 6 * 6)
        x = self.classifier(x)
        return x


if __name__ == '__main__':
    # model = torchvision.models.AlexNet()
    model = AlexNet()

    # 打印模型参数
    # for param in model.parameters():
    # print(param)

    # 打印模型名称与shape
    for name, parameters in model.named_parameters():
        print(name, ':', parameters.size())
    '''统计方法1'''
    total_num, trainable_num, trainable_para_size_MB= get_parameter_number(model)
    print('total_num：', total_num, 'trainable_num:', trainable_num, 'trainable_para_size_MB:', trainable_para_size_MB)
    '''统计方法2'''
    model = AlexNet()
    input = torch.randn(1, 3, 224, 224)
    flops, params = profile(model, inputs=(input,))
    print('FLOPS:', flops,'params：', params)
    '''统计方法3'''
    model1 = model.cuda()
    torchsummary.summary(model1, (3, 224, 224))

